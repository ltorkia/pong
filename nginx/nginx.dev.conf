events {
	# Le processus NGINX peut gérer jusqu’à 1024 connexions simultanées.
	worker_connections 1024;
}

http {

	# Map pour gérer les connexions WebSocket automatiquement:
	# -> crée une variable $connection_upgrade à partir de l’en-tête HTTP $http_upgrade.
	# Permet de vérifier si une connexion doit être "upgradée" pour les WebSockets.
	# default upgrade; : si $http_upgrade est défini, on indique "upgrade" pour maintenir la connexion ouverte.
	# '' close; : sinon, on ferme la connexion.
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

	# Blocs upstream: définissent des alias pour les services.
	# frontend pointe vers le conteneur nommé frontend sur le port 3000 (serveur de développement du frontend).
	# backend pointe vers le conteneur nommé backend sur le port 3001 (API backend).
	upstream frontend {
		server frontend:3000;
	}
	upstream backend {
		server backend:3001;
	}

	# Redirection HTTP vers HTTPS
	server {
		listen 80;
		listen [::]:80;
		server_name localhost;
		return 301 https://$server_name:8443$request_uri;
	}

	# Bloc server : définit un serveur HTTPS.
	server {
		client_max_body_size 30M;
		# ecoute sur le port 443 avec SSL
		listen 443 ssl;
		# ecoute sur le port 443 pour IPV6 -> devient le server par defaut
		listen [::]:443 ssl default_server; 
		
		# utilise uniquement TLSv1.2 ou TLSv1.3 pour connexions securisees
		ssl_protocols TLSv1.2 TLSv1.3;
		# chemin du certificat SSL
		ssl_certificate /etc/nginx/ssl/transcendence.crt ;
		# chemin vers la cle privee SSL
		ssl_certificate_key /etc/nginx/ssl/transcendence.key;
		
		server_name localhost;

		# API routes:
		# Redirige toutes les requêtes commençant par /api vers le backend.
		# proxy_pass http://backend; : redirige vers le serveur backend en utilisant l’alias défini plus haut.
		# Les lignes proxy_set_header ... transmettent les en-têtes d’origine:
		# Host, X-Real-IP, X-Forwarded-For, X-Forwarded-Proto permettent au backend de savoir qui fait la requête et par quel protocole.
		location /api {
			# HTTP ici car c’est interne (communication entre conteneurs, ce qui n'est pas exposé)
			proxy_pass http://backend;

			# Version HTTP nécessaire pour WebSocket
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_buffering off;

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;

			proxy_read_timeout 86400;
			proxy_send_timeout 86400;
		}

		# Route pour servir les fichiers d'uploads (avatars au cours du runtime)
		location /uploads/ {
			alias /usr/share/nginx/html/uploads/;
			expires 30d;
			add_header Cache-Control "public";
		}

		# Frontend avec support WebSocket pour HMR:
		# Route / (racine) : sert l’interface utilisateur (frontend).
		# proxy_pass http://frontend; : redirige vers le serveur frontend en utilisant l'alias défini plus haut.
		# proxy_http_version 1.1; : obligatoire pour le support WebSocket.
		# proxy_set_header Upgrade et Connection : nécessaires pour que les WebSockets (pour le rechargement à chaud, Hot Module Reloading) fonctionnent.
		# Les autres proxy_set_header sont comme pour /api.
		location / {
			# HTTP ici car c’est interne (communication entre conteneurs, ce qui n'est pas exposé)
			proxy_pass http://frontend;

			# Version HTTP nécessaire pour WebSocket
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			
			# Timeouts pour les WebSockets:
			# Pour éviter que la connexion WebSocket soit coupée prématurément.
			# 86400 secondes = 24 heures.
			proxy_read_timeout 86400;
			proxy_send_timeout 86400;
			
			# Buffering:
			# proxy_buffering off; : désactive le buffering de NGINX, utile pour voir les messages en direct (log, WebSocket, console).
			proxy_buffering off;

			# Ces headers renforcent la sécurité tout en restant compatibles avec les services Google Sign-In
			add_header Cross-Origin-Opener-Policy same-origin-allow-popups always;
			add_header Content-Security-Policy "
				default-src 'self';
				img-src 'self' data:;
				script-src 'self' 'unsafe-inline' https://accounts.google.com https://apis.google.com https://www.gstatic.com;
				connect-src 'self' https://oauth2.googleapis.com https://accounts.google.com;
				frame-src https://accounts.google.com https://*.googleusercontent.com;
				style-src 'self' 'unsafe-inline' https://accounts.google.com https://fonts.googleapis.com;
			" always;
		}

		# Pour les WebSockets
		location /ws/ {
			# HTTP ici car c’est interne (communication entre conteneurs, ce qui n'est pas exposé)
			proxy_pass http://backend;

			# Version HTTP nécessaire pour WebSocket
			proxy_http_version 1.1;

			# Obligatoire pour les websockets -> transmet websocket si c'en est une 
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade"; 
			proxy_set_header Host $host;

			# Pour ne pas interrompre une connection ws trop vite
			proxy_read_timeout 86400;
			proxy_send_timeout 86400;

			# Permet aux ws d'arriver en temps reel
			proxy_buffering off;
		}

		# Route de test simple pour vérifier que nginx fonctionne bien.
		location /nginx-status {
			return 200 "nginx is working";
			add_header Content-Type text/plain;
		}
	}
}