events {
    # Le processus NGINX peut gérer jusqu’à 1024 connexions simultanées.
    worker_connections 1024;
}

http {

    # Map pour gérer les connexions WebSocket automatiquement:
    # -> crée une variable $connection_upgrade à partir de l’en-tête HTTP $http_upgrade.
    # Permet de vérifier si une connexion doit être "upgradée" pour les WebSockets.
    # default upgrade; : si $http_upgrade est défini, on indique "upgrade" pour maintenir la connexion ouverte.
    # '' close; : sinon, on ferme la connexion.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Blocs upstream: définissent des alias pour les services.
    # frontend pointe vers le conteneur nommé frontend sur le port 3000 (serveur de développement du frontend).
    # backend pointe vers le conteneur nommé backend sur le port 3001 (API backend).
    upstream frontend {
        server frontend:3000;
    }
    upstream backend {
        server backend:3001;
    }

    # Bloc server : définit un serveur HTTPS.
   server {
    listen 443 ssl; #ecoute sur le port 443 avec SSL
    listen [::]:443 ssl default_server; #ecoute sur le port 443 pour IPV6 -> devient le server par defaut
	
	ssl_protocols TLSv1.2 TLSv1.3; #utilise uniquement TLSv1.2 ou TLSv1.3 pour connexions securisees
    ssl_certificate /etc/nginx/ssl/transcendence.crt ; #chemin du certificat SSL
    ssl_certificate_key /etc/nginx/ssl/transcendence.key; #chemin vers la cle privee SSL
    
    server_name localhost;

        # API routes:
        # Redirige toutes les requêtes commençant par /api vers le backend.
        # proxy_pass http://backend; : redirige vers le serveur backend en utilisant l’alias défini plus haut.
        # Les lignes proxy_set_header ... transmettent les en-têtes d’origine:
        # Host, X-Real-IP, X-Forwarded-For, X-Forwarded-Proto permettent au backend de savoir qui fait la requête et par quel protocole.
        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Frontend avec support WebSocket pour HMR:
        # Route / (racine) : sert l’interface utilisateur (frontend).
        # proxy_pass http://frontend; : redirige vers le serveur frontend en utilisant l'alias défini plus haut.
        # proxy_http_version 1.1; : obligatoire pour le support WebSocket.
        # proxy_set_header Upgrade et Connection : nécessaires pour que les WebSockets (pour le rechargement à chaud, Hot Module Reloading) fonctionnent.
        # Les autres proxy_set_header sont comme pour /api.
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts pour les WebSockets:
            # Pour éviter que la connexion WebSocket soit coupée prématurément.
            # 86400 secondes = 24 heures.
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            
            # Buffering:
            # proxy_buffering off; : désactive le buffering de NGINX, utile pour voir les messages en direct (log, WebSocket, console).
            proxy_buffering off;
        }

        # Pour les WebSockets
        location /ws/ {
            proxy_pass http://backend; # adapte à ton service backend
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade; #obligatoire pour les websockets ->transmet websocket si c en est une 
            proxy_set_header Connection "Upgrade"; 
            proxy_set_header Host $host;

            proxy_read_timeout 86400; #pour ne pas interrompre une connection ws trop vite
            proxy_send_timeout 86400;
            proxy_buffering off; #permet aux ws d arriver en temps reel
        }

        # Route de test simple pour vérifier que nginx fonctionne bien.
        location /nginx-status {
            return 200 "nginx is working";
            add_header Content-Type text/plain;
        }
    }

    
    # Bloc server : définit un serveur HTTP.
    # listen 80; : écoute les requêtes HTTP sur le port 80 (port standard).
    # /!\ A changer quand on passera en https!
    # server_name localhost;: ce bloc répond aux requêtes pour localhost.
    # server {
    #     listen 80;
    #     server_name localhost;

    #     # API routes:
    #     # Redirige toutes les requêtes commençant par /api vers le backend.
    #     # proxy_pass http://backend; : redirige vers le serveur backend en utilisant l’alias défini plus haut.
    #     # Les lignes proxy_set_header ... transmettent les en-têtes d’origine:
    #     # Host, X-Real-IP, X-Forwarded-For, X-Forwarded-Proto permettent au backend de savoir qui fait la requête et par quel protocole.
    #     location /api {
    #         proxy_pass http://backend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     # Frontend avec support WebSocket pour HMR:
    #     # Route / (racine) : sert l’interface utilisateur (frontend).
    #     # proxy_pass http://frontend; : redirige vers le serveur frontend en utilisant l'alias défini plus haut.
    #     # proxy_http_version 1.1; : obligatoire pour le support WebSocket.
    #     # proxy_set_header Upgrade et Connection : nécessaires pour que les WebSockets (pour le rechargement à chaud, Hot Module Reloading) fonctionnent.
    #     # Les autres proxy_set_header sont comme pour /api.
    #     location / {
    #         proxy_pass http://frontend;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection $connection_upgrade;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
            
    #         # Timeouts pour les WebSockets:
    #         # Pour éviter que la connexion WebSocket soit coupée prématurément.
    #         # 86400 secondes = 24 heures.
    #         proxy_read_timeout 86400;
    #         proxy_send_timeout 86400;
            
    #         # Buffering:
    #         # proxy_buffering off; : désactive le buffering de NGINX, utile pour voir les messages en direct (log, WebSocket, console).
    #         proxy_buffering off;
    #     }

    #     # Route de test simple pour vérifier que nginx fonctionne bien.
    #     location /nginx-status {
    #         return 200 "nginx is working";
    #         add_header Content-Type text/plain;
    #     }
    # }
}