events {
	# Le processus NGINX peut gérer jusqu’à 1024 connexions simultanées.
	worker_connections 1024;
}

http {

	# Map pour gérer les connexions WebSocket automatiquement:
	# -> crée une variable $connection_upgrade à partir de l’en-tête HTTP $http_upgrade.
	# Permet de vérifier si une connexion doit être "upgradée" pour les WebSockets.
	# default upgrade; : si $http_upgrade est défini, on indique "upgrade" pour maintenir la connexion ouverte.
	# '' close; : sinon, on ferme la connexion.
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

	# Inclusion des types MIME essentiels pour correctement servir les fichiers.
	include       /etc/nginx/mime.types;

	# Déclaration des types MIME pour les fichiers statiques.
	# Cela permet à NGINX d'envoyer le bon Content-Type HTTP selon l'extension du fichier.
	# Important pour que les navigateurs interprètent correctement les polices, images, etc.
	types {
		woff2  font/woff2;
		woff   font/woff;
		eot    application/vnd.ms-fontobject;
		ttf    font/ttf;
		otf    font/otf;
	}

	# Type MIME par défaut si non reconnu.
	default_type  application/octet-stream;

	# Activation de la compression gzip pour améliorer la performance réseau.
	gzip on;
	# Permet de gérer la réponse gzip en fonction de l'en-tête Accept-Encoding.
	gzip_vary on;
	# Active gzip uniquement pour les réponses > 1Ko.
	gzip_min_length 1024;
	
	# Types MIME pour lesquels la compression gzip est activée.
	gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

	# Bloc upstream backend:
	# Définit un alias "backend" pointant vers le container backend sur le port 3001.
	upstream backend {
		server backend:3001;
	}

	# Redirection HTTP vers HTTPS
	server {
		listen 80;
		listen [::]:80;
		server_name localhost;
		return 301 https://$server_name:8443$request_uri;
	}

	server {

		# ecoute sur le port 443 avec SSL
		listen 443 ssl;
		# ecoute sur le port 443 pour IPV6 -> devient le server par defaut
		listen [::]:443 ssl default_server; 

		# utilise uniquement TLSv1.2 ou TLSv1.3 pour connexions securisees
		ssl_protocols TLSv1.2 TLSv1.3;
		# chemin du certificat SSL
		ssl_certificate /etc/nginx/ssl/transcendence.crt ;
		# chemin vers la cle privee SSL
		ssl_certificate_key /etc/nginx/ssl/transcendence.key;

		server_name localhost;

		# Fichier index à servir par défaut dans le dossier racine.
		index index.html;

		# Fichiers de logs pour debug (accès et erreurs).
		access_log /var/log/nginx/access.log;
		error_log /var/log/nginx/error.log debug;

		# Route API:
		# Toutes les requêtes commençant par /api sont proxyées vers le backend Fastify.
		location /api {
			# HTTP ici car c’est interne (communication entre conteneurs, ce qui n'est pas exposé)
			proxy_pass http://backend;

			# Version HTTP nécessaire pour WebSocket
			proxy_http_version 1.1;

			# Indispensables pour WebSocket
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			
			# Transmission des en-têtes d’origine pour conserver l’info client dans le backend.
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			
			# Timeout pour la connexion proxy (utile pour éviter les blocages).
			proxy_connect_timeout 30s;
			proxy_send_timeout 86400;
			proxy_read_timeout 86400;

			# Sockets côté backend
			proxy_buffering off;
		}

		# Route pour servir les fichiers d'uploads (avatars au cours du runtime)
		location /uploads/ {
			alias /usr/share/nginx/html/uploads/;
			expires 30d;
			add_header Cache-Control "public";
		}

		# Route pour servir les assets statiques (JS, CSS, images, polices, etc.)
		location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {

			# Racine où sont copiés les fichiers build frontend.
			root /usr/share/nginx/html;
			
			# Cache long (1 an) car ces fichiers sont versionnés (hash dans le nom).
			expires 1y;
			add_header Cache-Control "public, immutable";
			add_header Vary Accept-Encoding;
			
			# Pas de logs d’accès pour ces fichiers statiques (pour alléger les logs).
			access_log off;
		}

		# Route principale pour le frontend (SPA - Single Page Application).
		location / {

			# Racine des fichiers frontend statiques.
			root /usr/share/nginx/html;

			# History API fallback : si la route n'existe pas en fichier, on sert index.html.
			try_files $uri $uri/ /index.html;

			# Cache-control léger sur HTML
			add_header Cache-Control "no-cache, must-revalidate";

			# Pour éviter les problèmes de sécurité avec les popups et iframes
			# add_header Cross-Origin-Opener-Policy same-origin always;
			# add_header Cross-Origin-Embedder-Policy require-corp always;
			# add_header Content-Security-Policy "script-src 'self' https://accounts.google.com https://apis.google.com; connect-src 'self' https://oauth2.googleapis.com https://accounts.google.com; frame-src https://accounts.google.com https://*.googleusercontent.com;";
		}
		
		# Web-sockets
		location /ws/ {
			proxy_pass http://backend;
			proxy_http_version 1.1;

			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;

			proxy_read_timeout 86400;
			proxy_send_timeout 86400;

			proxy_buffering off;
		}

		# Route de test simple pour vérifier que nginx fonctionne bien.
		location /nginx-status {
			return 200 "nginx is working";
			add_header Content-Type text/plain;
		}
	}
}